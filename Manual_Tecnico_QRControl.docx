Manual Técnico
QRControl

Versión: 1.0
Autor: [Tu Nombre]
Fecha: [Fecha Actual]

Índice
1. Introducción
2. Objetivo del sistema
3. Arquitectura general
4. Tecnologías y dependencias
5. Estructura del proyecto
6. Módulos principales
   6.1 Autenticación y gestión de usuarios
   6.2 Gestión de autos
   6.3 Gestión de estacionamiento
   6.4 Historial de estacionamiento
   6.5 Persistencia de sesión y preferencias
7. Persistencia de datos
8. Navegación y flujo de pantallas
9. Personalización de temas y colores
10. Proceso de despliegue y compilación
11. Consideraciones de seguridad
12. Mantenimiento y buenas prácticas
13. Soporte técnico

---

1. Introducción
Este manual técnico describe la arquitectura, componentes y funcionamiento interno de la aplicación QRControl, diseñada para la gestión de estacionamientos mediante códigos QR.

2. Objetivo del sistema
Proveer una solución móvil eficiente para el control de acceso y gestión de vehículos en estacionamientos, permitiendo a usuarios y supervisores interactuar con el sistema de manera segura y sencilla.

3. Arquitectura general
La app sigue una arquitectura basada en MVVM (Model-View-ViewModel) y utiliza Firebase como backend para autenticación y almacenamiento de datos.

[Diagrama aquí: Arquitectura general de la app]

4. Tecnologías y dependencias
- Kotlin (lenguaje principal)
- Jetpack Compose (UI)
- Firebase Authentication y Firestore
- SharedPreferences (persistencia local)
- Gradle (compilación)
- Otras: Material Icons, librerías de navegación, etc.

[Fragmento de código aquí: build.gradle con dependencias principales]

5. Estructura del proyecto
- app/
  - src/main/java/com/espoch/qrcontrol/
    - data/ (repositorios y acceso a datos)
    - model/ (modelos de datos)
    - navigation/ (navegación y NavGraph)
    - ui/ (pantallas y componentes UI)
    - theme/ (colores, tipografía, tema)
  - res/ (recursos gráficos y layouts)
  - build.gradle, settings.gradle, etc.

[Captura de pantalla aquí: Estructura de carpetas en el IDE]

6. Módulos principales

6.1 Autenticación y gestión de usuarios
- Uso de Firebase Authentication para login, registro y persistencia de sesión.
- Roles diferenciados: usuario y supervisor.
[Fragmento de código aquí: AuthRepository.kt]

6.2 Gestión de autos
- CRUD de autos asociados a cada usuario.
- Almacenamiento en Firestore.
[Fragmento de código aquí: ParkingRepository.kt y modelo Cars.kt]

6.3 Gestión de estacionamiento
- Consulta y actualización de espacios (disponible, ocupado, reservado).
- Asignación de espacios a autos.
[Fragmento de código aquí: ParkingScreen.kt y modelo ParkingSpot.kt]

6.4 Historial de estacionamiento
- Registro de entradas y salidas.
- Consulta y filtrado por supervisores.
[Fragmento de código aquí: HistorialParking.kt y HistoryScreen.kt]

6.5 Persistencia de sesión y preferencias
- Uso de SharedPreferences para mantener sesión y preferencias (modo oscuro, etc.).
[Fragmento de código aquí: SessionManager.kt]

7. Persistencia de datos
- Usuarios, autos, espacios y registros se almacenan en Firebase Firestore.
- Sesión y preferencias locales en SharedPreferences.
[Diagrama aquí: Flujo de datos entre app y Firebase]

8. Navegación y flujo de pantallas
- Navegación gestionada con NavController y NavGraph.
- Acceso condicional según rol y sesión.
[Diagrama aquí: Flujo de navegación]

9. Personalización de temas y colores
- Definición de paleta de colores profesional en theme/Color.kt
- Soporte para modo claro/oscuro.
[Fragmento de código aquí: theme/Theme.kt]

10. Proceso de despliegue y compilación
- Compilar con Gradle desde Android Studio.
- Configurar google-services.json para Firebase.
- Generar APK o publicar en Play Store.
[Captura de pantalla aquí: Proceso de build en Android Studio]

11. Consideraciones de seguridad
- Validación de datos en frontend y backend.
- Uso de Firebase Rules para restringir acceso.
- Encriptación de contraseñas y datos sensibles.

12. Mantenimiento y buenas prácticas
- Código documentado y modular.
- Uso de comentarios y convenciones de nombres.
- Actualización periódica de dependencias.

13. Soporte técnico
Para soporte y mantenimiento, contactar a: soporte@qrcontrol.com

---

Fin del manual técnico. 